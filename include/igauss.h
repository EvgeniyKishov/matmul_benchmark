#pragma once

/**
* igauss.h - gaussian integration (quadrature)
*/

#include "math_common.h"
#include "vm.h"

/**
* struct igauss_data - данные для передачи в функцию интегрир-я по Гауссу
* @dim: размерность пространства (1, 2 или 3)
* @pts_num: схема интегрирования (1-о, 2-х или 3-х точечная)
* @min, @max: пределы интегрирования
*/
struct igauss_data {
	int dim;
	int pts_num;
	struct v3d min, max;
};

/**
* igauss_matr() - интегрирование по Гауссу матрицы-функции координат
* @res: результат интегрирования
* @idata: параметры интегрирования
* @mfun(): подынтегральная матрица-функция
* @fdata: вспомогательные данные для вычисления mfun()
* 
* Функция вычисляет интеграл вида
*  ///
*  |||[mfun(x,y,z)]dV 
*  ///
* от матрицы-функции по объёму куба. Функция может зависеть как от x, 
* так и от x,y или x,y,z. Пределы интегрирования передаются через переменную 
* @idata. Поддерживаются 1-о, 2-х или 3-х точечная схемы интегрирования. 
* 
* Функция возвращает код ошибки -1, если число точек интегр-я указано > 3.
* Если один из аргументов, кроме @fdata, равен NULL -> возвращается -2.
* В случае успеха возвращается 0.
*/
int DLL igauss_matr(struct matr *res, const struct igauss_data *idata,
	 void (*mfun)(struct matr *mat, const struct v3d *r, const void *data),
	        const void *fdata);


/**
* igauss() - интегрирование по Гауссу скалярной функции
* @idata: параметры интегрирования
* @f(): подынтегральная функция
* @fdata: вспомогательные данные для вычисления f()
* 
* Функция вычисляет интеграл вида
*  ///
*  |||f(x,y,z)dV 
*  ///
* от скалярной функции по объёму куба. Функция может зависеть как от x, 
* так и от x,y или x,y,z. Пределы интегрирования передаются через переменную 
* @idata. Поддерживаются 1-о, 2-х или 3-х точечная схемы интегрирования. 
* 
* Функция возвращает значение интеграла. Если один из аргументов == NULL или 
* число точек интегрирования > 3 -> возвращается HUGE_VAL.
*/
double DLL igauss(const struct igauss_data *idata, 
	          double (*f)(const struct v3d *r, const void *data), 
	          const void *data);