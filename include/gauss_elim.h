#pragma once

/**
* gauss_elim.h - Gaussian elimination
*/

#include "math_common.h"
#include "vm.h"

/**
* gauss_elim_m() решение СЛАУ методом Гаусса с множеством правых частей
* @x: матрица неизвестных (N x M)
* @a: матрица (N x N) СЛАУ 
* @b: матрица (N x M) правой части
* 
* Функция решает СЛАУ с квадратной матрицей (N x N) общего вида.
* Одновременно находит решение для M правых частей.
* В алгоритме используется выбор ведущего элемента из текущего столбца
* (partial pivoting).
* В случае успеха возвращает 0, в случае ошибки: -1.
* Если один из аргументов == NULL -> возвращается -2.
*/
int DLL gauss_elim_m(struct matr *x, struct matr *a, struct matr *b);

/**
* gauss_elim() - решение СЛАУ методом Гаусса (gaussian elimination)
* @x: вектор неизвестных
* @a: матрица СЛАУ
* @b: вектор правой части
* 
* Функция построена как частный случай gauss_elim_m(), где матрица неизвестных
* и матрица правой части состоят из одного столбца, т.е. являются вектором.
* Если один из аргументов == NULL -> возвращается -2.
*/
int DLL gauss_elim(struct vec *x, struct matr *a, struct vec *b);

/**
* minv() - обращение матрицы (Matrix INVersion)
* @ainv: обратная матрица (результат)
* @a: исходная матрица
* 
* Функция находит обратную матрицу [ainv]^-1 для [a].
* Если матрица [a] не квадратная, а также если размерности [a] и [ainv]
* не согласованы -> возвращается -1.
* Если один из аргументов == NULL -> возвращается -2.
* В случае успеха возвращается 0.
*/
int DLL minv(struct matr *ainv, struct matr *a);

/**
* det() - вычисление определителя квадратной матрицы
* @a: квадратная матрица
* 
* Функция возвращает значение det(a) в случае успеха. Если матрица 
* неквадратная или @a == NULL - возвращается HUGE_VAL.
*/
double DLL det(const struct matr *a);