#pragma once

/**
* vmdef.h - vector-matrix definitions
*/

#include "math_common.h"

/**
* struct v3d - вектор
* @x, @y, @z: координаты
*/
struct v3d {
	double x, y, z;
};

/**
* struct m3d - "трёхмерная" матрица
*/
struct m3d {
	double xx, xy, xz,
	       yx, yy, yz,
	       zx, zy, zz;
};

/**
* struct vec - n-мерный вектор
* @v: массив значений
* @n: число элементов вектора
*/
struct vec {
	double *v;
	int n;
};

/**
* struct matr - прямоугольная матрица
* @v: двумерный массив значений
* @n, @m: число строк и столбцов
*/
struct matr {
	double **v;
	int n, m;
};

/**
* struct tdmatr - трёхдиагональная матрица (ТДМ)
*
* @n: размерность матрицы
* @a: нижняя диагональ
* @b: главная диагональ
* @c: верхняя диагональ
*/
struct tdmatr {
	int n;
	double *a;
	double *b;
	double *c;
};

/**
* print_vec() - печать n-вектора в консоль
* @vect: вектора
* @fmt: формат вывода
* 
* Функция использует printf() для форматированного вывода вектора в консоль
*/
void DLL print_vec(const struct vec *vect, const char *fmt);

/**
* init_vec() - инициализация n-мерного вектора
* @n: кол-во элементов вектора
* 
* Функция выделяет память под массив значений вектора и заполняет их нулями. 
* Функция используется при статическом выделении память под вектор.
* Пример:
* struct vec v = {0};
* init_vec(&v, 2);
*/
void DLL init_vec(struct vec *vect, int n);

/**
* free_vec() - освобождение памяти из-под массива значений вектора
* @vect: вектор
* 
* Функция используется при статическом выделении памяти под вектор:
* struct vec v = {0};
* init_vec(&v, 2);
* free_vec(&v);
*/
void DLL free_vec(struct vec *vect);

/**
* create_vec() - создание n-мерного вектора
* @n: кол-во элементов вектора
* 
* Функция выделяет память под n-мерный вектор и возвращает указатель
* на неё. Элементы вектора инициализируются нулями.  
* Функция используется при динамическом выделении память под матрицу.
* Пример:
* struct vec *v = create_vec(2);
*/
struct vec DLL *create_vec(int n);

/**
* vfill() - заполнение вектора заданным значением
* @a: вектор
* @val: значение
*/
void DLL vfill(struct vec *a, double val);

/**
* vcopy() - создание копии вектора
* @a: вектор для копирования
* 
* Функция создаёт вектор при помощи create_vec(), переносит в него данные 
* из @a и возвращает указатель на созданный вектор.
* Если a == NULL, возвращается NULL.
*/
struct vec DLL *vcopy(const struct vec *a);

/**
* vdupl() - создание дубликата вектора (Vector DUPLicate)
* @a: вектор для копирования (ВХОД)
* @acopy: скопированный вектор (ВЫХОД)
* 
* Функция переносит данные из @a в @acopy. Она отличается от vcopy() тем,
* что не выделяет память под скопированный вектор. Предполагается, что 
* память под него выделяется в вызывающей программе.
* 
* Если хотя бы один из аргументов равен NULL, функция возвращает -1,
* иначе - 0. 
*/
int DLL vdupl(struct vec *acopy, const struct vec *a);

/**
* delete_vec() - удаление n-мерного вектора
* @vect: вектор
* 
* Функция освобождает память, выделенную под вектор. Указатель на неё (@vect)
* обнуляется.  
* Функция используется при динамическом выделении память под вектор.
* Пример:
* struct vec *v = create_vec(2);
* delete_vec(&v);
*/
void DLL delete_vec(struct vec **vect);

/**
* print_matr() - печать матрицы в консоль
* @mat: матрица
* @fmt: формат вывода
* 
* Функция использует printf() для форматированного вывода матрицы в консоль
*/
void DLL print_matr(const struct matr *mat, const char *fmt);

/**
* init_matr() - инициализация прямоугольной матрицы
* @n, @m: кол-во строк и столбцов
* 
* Функция выделяет память под массив значений матрицы и заполняет их нулями. 
* Функция используется при статическом выделении память под матрицу.
* Пример:
* struct matr mat = {0};
* init_matr(&mat, 2, 4);
*/
void DLL init_matr(struct matr *mat, int n, int m);

/**
* free_matr() - освобождение памяти из-под массива значений матрицы
* @mat: матрица
* 
* Функция используется при статическом выделении память под матрицу:
* struct matr mat = {0};
* init_matr(&mat, 2, 4);
* free_matr(&mat);
*/
void DLL free_matr(struct matr *mat);

/**
* fill_matr() - заполнение массива значений матрицы 
* @val: значение, используемое для заполнения
*/
void DLL fill_matr(struct matr *mat, double val);

/**
* create_matr() - создание прямоугольной матрицы
* @n, @m: кол-во строк и столбцов
* 
* Функция выделяет память под матрицу размером m на n и возвращает указатель
* на неё. Элементы матрицы инициализируются нулями.  
* Функция используется при динамическом выделении память под матрицу.
* Пример:
* struct matr *mat = create_matr(2, 4);
*/
struct matr DLL *create_matr(int n, int m);

/**
* mcopy() - создание копии матрицы
* @a: матрица для копирования
* 
* Функция создаёт матрицу при помощи create_matr(), переносит в неё данные 
* из @a и возвращает указатель на созданную матрицу.
* Если a == NULL, возвращается NULL.
*/
struct matr DLL *mcopy(const struct matr *a);

/**
* mdupl() - создание дубликата матрицы (Matrix DUPLicate)
* @a: матрица для копирования (ВХОД)
* @acopy: скопированная матрица (ВЫХОД)
* 
* Функция переносит данные из @a в @acopy. Она отличается от mcopy() тем,
* что не выделяет память под скопированную матрицу. Предполагается, что 
* память под неё выделяется в вызывающей программе.
* 
* Если хотя бы один из аргументов равен NULL, функция возвращает -1,
* иначе - 0. 
*/
int DLL mdupl(struct matr *acopy, const struct matr *a);

/**
* delete_matr() - удаление прямоугольной матрицы
* @mat: матрица
* 
* Функция освобождает память, выделенную под матрицу. Указатель на неё (@mat)
* обнуляется.  
* Функция используется при динамическом выделении память под матрицу.
* Пример:
* struct matr *mat = create_matr(2, 4);
* delete_matr(&mat);
*/
void DLL delete_matr(struct matr **mat);

/**
* init_tdmatr() - инициализация трёхдиагональной матрицы (ТДМ)
* @n: размерность матрицы
* 
* Функция выделяет память под массив значений ТДМ и заполняет их нулями. 
* Функция используется при статическом выделении память под матрицу.
* Пример:
* struct tdmatr mat = {0};
* init_tdmatr(&mat, 4);
*/
void DLL init_tdmatr(struct tdmatr *mat, int n);

/**
* free_tdmatr() - освобождение памяти из-под массивов значений ТДМ
* @mat: ТДМ
* 
* Функция используется при статическом выделении память под матрицу:
* struct tdmatr mat = {0};
* init_tdmatr(&mat, 4);
* free_tdmatr(&mat);
*/
void DLL free_tdmatr(struct tdmatr *mat);

/**
* create_tdmatr() - создание ТДМ
* @n: размерность матрицы
* 
* Функция выделяет память под ТДМ размером n на n и возвращает указатель
* на неё. Элементы матрицы инициализируются нулями.  
* Функция используется при динамическом выделении память под матрицу.
* Пример:
* struct tdmatr *mat = create_tdmatr(4);
*/
struct tdmatr DLL *create_tdmatr(int n);

/**
* delete_tdmatr() - удаление ТДМ
* @mat: ТДМ
* 
* Функция освобождает память, выделенную под матрицу. Указатель на неё (@mat)
* обнуляется.  
* Функция используется при динамическом выделении память под матрицу.
* Пример:
* struct tdmatr *mat = create_tdmatr(4);
* delete_tdmatr(&mat);
*/
void DLL delete_tdmatr(struct tdmatr **mat);